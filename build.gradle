/*
 * Copyright (C)  2019-2024 Domjos
 * This file is part of UniTrackerMobile <https://unitrackermobile.de/>.
 *
 * UniTrackerMobile is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * UniTrackerMobile is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with UniTrackerMobile. If not, see <http://www.gnu.org/licenses/>.
 */

// app-versions
ext.propVersion = 35
ext.propVersionCode = "2.0 Alpha.2"

// java-level
ext.propJavaVersion = "17"

// android-versions
ext.propCompVersion = 34
ext.propMinVersion = 26

// libraries
ext.propAndPreferences = "1.2.1"
ext.propAndAppCompat = "1.7.0"
ext.propMaterial = "1.12.0"

buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.5.1'
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/ksoap2-android-releases/' }
    }
}

tasks.register('clean', Delete) {
    delete rootProject.layout.buildDirectory
}

tasks.register('customZip', Zip) {
    clean
    from '.'
    include 'build.gradle'
    include '.gitignore'
    include 'LICENSE'
    include 'README.md'
    include '*.java'
    include 'data/**'
    include 'app/**'
    include 'unitrackerlibrary/**'
    include 'gradle.properties'
    exclude 'unitrackerlibrary/build'
    exclude 'app/build'
    archiveFileName = rootProject.name + '.zip'
    destinationDirectory = file(rootProject.rootDir)
}

tasks.register('archiveReleases', Copy) {
    def appPath = projectDir.toString() + "/app"
    def releasePath = appPath + "/release"
    def apkDebugPath = appPath + "/build/outputs/apk/debug"
    def aabDebugPath = appPath + "/build/outputs/bundle/debug"

    from apkDebugPath
    from aabDebugPath
    from releasePath

    // generate path
    def release
    def type
    if (propVersionCode.contains(".beta")) {
        release = propVersionCode.split("\\.beta")[0].trim()
        type = "beta/"
    } else if (propVersionCode.contains(".alpha")) {
        release = propVersionCode.split("\\.alpha")[0].trim()
        type = "alpha/"
    } else {
        release = propVersionCode
        type = ""
    }

    into "${projectDir}/data/releases/Version ${release}/${type}"
}